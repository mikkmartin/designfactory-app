/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          id?: parameters["rowFilter.profiles.id"];
          interface_settings?: parameters["rowFilter.profiles.interface_settings"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          id?: parameters["rowFilter.profiles.id"];
          interface_settings?: parameters["rowFilter.profiles.interface_settings"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          id?: parameters["rowFilter.profiles.id"];
          interface_settings?: parameters["rowFilter.profiles.interface_settings"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/scrapers": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.scrapers.created_at"];
          modified_at?: parameters["rowFilter.scrapers.modified_at"];
          deleted_at?: parameters["rowFilter.scrapers.deleted_at"];
          title?: parameters["rowFilter.scrapers.title"];
          selectors?: parameters["rowFilter.scrapers.selectors"];
          urlpattern?: parameters["rowFilter.scrapers.urlpattern"];
          id?: parameters["rowFilter.scrapers.id"];
          figma_id?: parameters["rowFilter.scrapers.figma_id"];
          figma_frame?: parameters["rowFilter.scrapers.figma_frame"];
          owner_profile_id?: parameters["rowFilter.scrapers.owner_profile_id"];
          slug?: parameters["rowFilter.scrapers.slug"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["scrapers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** scrapers */
          scrapers?: definitions["scrapers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.scrapers.created_at"];
          modified_at?: parameters["rowFilter.scrapers.modified_at"];
          deleted_at?: parameters["rowFilter.scrapers.deleted_at"];
          title?: parameters["rowFilter.scrapers.title"];
          selectors?: parameters["rowFilter.scrapers.selectors"];
          urlpattern?: parameters["rowFilter.scrapers.urlpattern"];
          id?: parameters["rowFilter.scrapers.id"];
          figma_id?: parameters["rowFilter.scrapers.figma_id"];
          figma_frame?: parameters["rowFilter.scrapers.figma_frame"];
          owner_profile_id?: parameters["rowFilter.scrapers.owner_profile_id"];
          slug?: parameters["rowFilter.scrapers.slug"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.scrapers.created_at"];
          modified_at?: parameters["rowFilter.scrapers.modified_at"];
          deleted_at?: parameters["rowFilter.scrapers.deleted_at"];
          title?: parameters["rowFilter.scrapers.title"];
          selectors?: parameters["rowFilter.scrapers.selectors"];
          urlpattern?: parameters["rowFilter.scrapers.urlpattern"];
          id?: parameters["rowFilter.scrapers.id"];
          figma_id?: parameters["rowFilter.scrapers.figma_id"];
          figma_frame?: parameters["rowFilter.scrapers.figma_frame"];
          owner_profile_id?: parameters["rowFilter.scrapers.owner_profile_id"];
          slug?: parameters["rowFilter.scrapers.slug"];
        };
        body: {
          /** scrapers */
          scrapers?: definitions["scrapers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/templates": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.templates.id"];
          created_at?: parameters["rowFilter.templates.created_at"];
          modified_at?: parameters["rowFilter.templates.modified_at"];
          deleted_at?: parameters["rowFilter.templates.deleted_at"];
          description?: parameters["rowFilter.templates.description"];
          title?: parameters["rowFilter.templates.title"];
          file_type?: parameters["rowFilter.templates.file_type"];
          owner_profile_id?: parameters["rowFilter.templates.owner_profile_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["templates"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** templates */
          templates?: definitions["templates"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.templates.id"];
          created_at?: parameters["rowFilter.templates.created_at"];
          modified_at?: parameters["rowFilter.templates.modified_at"];
          deleted_at?: parameters["rowFilter.templates.deleted_at"];
          description?: parameters["rowFilter.templates.description"];
          title?: parameters["rowFilter.templates.title"];
          file_type?: parameters["rowFilter.templates.file_type"];
          owner_profile_id?: parameters["rowFilter.templates.owner_profile_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.templates.id"];
          created_at?: parameters["rowFilter.templates.created_at"];
          modified_at?: parameters["rowFilter.templates.modified_at"];
          deleted_at?: parameters["rowFilter.templates.deleted_at"];
          description?: parameters["rowFilter.templates.description"];
          title?: parameters["rowFilter.templates.title"];
          file_type?: parameters["rowFilter.templates.file_type"];
          owner_profile_id?: parameters["rowFilter.templates.owner_profile_id"];
        };
        body: {
          /** templates */
          templates?: definitions["templates"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/themes": {
    get: {
      parameters: {
        query: {
          slug?: parameters["rowFilter.themes.slug"];
          created_at?: parameters["rowFilter.themes.created_at"];
          owner_template_id?: parameters["rowFilter.themes.owner_template_id"];
          deleted_at?: parameters["rowFilter.themes.deleted_at"];
          modified_at?: parameters["rowFilter.themes.modified_at"];
          title?: parameters["rowFilter.themes.title"];
          ui_schema?: parameters["rowFilter.themes.ui_schema"];
          size?: parameters["rowFilter.themes.size"];
          owner_profile_id?: parameters["rowFilter.themes.owner_profile_id"];
          figma_id?: parameters["rowFilter.themes.figma_id"];
          figma_node?: parameters["rowFilter.themes.figma_node"];
          fonts?: parameters["rowFilter.themes.fonts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["themes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** themes */
          themes?: definitions["themes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          slug?: parameters["rowFilter.themes.slug"];
          created_at?: parameters["rowFilter.themes.created_at"];
          owner_template_id?: parameters["rowFilter.themes.owner_template_id"];
          deleted_at?: parameters["rowFilter.themes.deleted_at"];
          modified_at?: parameters["rowFilter.themes.modified_at"];
          title?: parameters["rowFilter.themes.title"];
          ui_schema?: parameters["rowFilter.themes.ui_schema"];
          size?: parameters["rowFilter.themes.size"];
          owner_profile_id?: parameters["rowFilter.themes.owner_profile_id"];
          figma_id?: parameters["rowFilter.themes.figma_id"];
          figma_node?: parameters["rowFilter.themes.figma_node"];
          fonts?: parameters["rowFilter.themes.fonts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          slug?: parameters["rowFilter.themes.slug"];
          created_at?: parameters["rowFilter.themes.created_at"];
          owner_template_id?: parameters["rowFilter.themes.owner_template_id"];
          deleted_at?: parameters["rowFilter.themes.deleted_at"];
          modified_at?: parameters["rowFilter.themes.modified_at"];
          title?: parameters["rowFilter.themes.title"];
          ui_schema?: parameters["rowFilter.themes.ui_schema"];
          size?: parameters["rowFilter.themes.size"];
          owner_profile_id?: parameters["rowFilter.themes.owner_profile_id"];
          figma_id?: parameters["rowFilter.themes.figma_id"];
          figma_node?: parameters["rowFilter.themes.figma_node"];
          fonts?: parameters["rowFilter.themes.fonts"];
        };
        body: {
          /** themes */
          themes?: definitions["themes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/profile_with_data": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            anon_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  profiles: {
    /** Format: uuid */
    user_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: json
     * @default {}
     */
    interface_settings: string;
  };
  scrapers: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    modified_at?: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
    /** Format: character varying */
    title?: string;
    /**
     * Format: jsonb
     * @default {}
     */
    selectors?: string;
    /** Format: character varying */
    urlpattern?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    figma_id?: string;
    /** Format: character varying */
    figma_frame?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    owner_profile_id?: string;
    /** Format: character varying */
    slug?: string;
  };
  templates: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    modified_at: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
    /** Format: character varying */
    description?: string;
    /** Format: character varying */
    title: string;
    /**
     * Format: character varying
     * @default image
     */
    file_type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    owner_profile_id?: string;
  };
  themes: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    slug: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `templates.id`.<fk table='templates' column='id'/>
     */
    owner_template_id: string;
    /** Format: timestamp with time zone */
    deleted_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    modified_at?: string;
    /** Format: character varying */
    title?: string;
    /**
     * Format: jsonb
     * @default {}
     */
    ui_schema?: string;
    /** Format: ARRAY */
    size?: unknown[];
    /** Format: uuid */
    owner_profile_id?: string;
    /** Format: character varying */
    figma_id: string;
    /** Format: character varying */
    figma_node?: string;
    /**
     * Format: jsonb
     * @default []
     */
    fonts: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.user_id": string;
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: json */
  "rowFilter.profiles.interface_settings": string;
  /** @description scrapers */
  "body.scrapers": definitions["scrapers"];
  /** Format: timestamp with time zone */
  "rowFilter.scrapers.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.scrapers.modified_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.scrapers.deleted_at": string;
  /** Format: character varying */
  "rowFilter.scrapers.title": string;
  /** Format: jsonb */
  "rowFilter.scrapers.selectors": string;
  /** Format: character varying */
  "rowFilter.scrapers.urlpattern": string;
  /** Format: uuid */
  "rowFilter.scrapers.id": string;
  /** Format: character varying */
  "rowFilter.scrapers.figma_id": string;
  /** Format: character varying */
  "rowFilter.scrapers.figma_frame": string;
  /** Format: uuid */
  "rowFilter.scrapers.owner_profile_id": string;
  /** Format: character varying */
  "rowFilter.scrapers.slug": string;
  /** @description templates */
  "body.templates": definitions["templates"];
  /** Format: uuid */
  "rowFilter.templates.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.templates.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.templates.modified_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.templates.deleted_at": string;
  /** Format: character varying */
  "rowFilter.templates.description": string;
  /** Format: character varying */
  "rowFilter.templates.title": string;
  /** Format: character varying */
  "rowFilter.templates.file_type": string;
  /** Format: uuid */
  "rowFilter.templates.owner_profile_id": string;
  /** @description themes */
  "body.themes": definitions["themes"];
  /** Format: character varying */
  "rowFilter.themes.slug": string;
  /** Format: timestamp with time zone */
  "rowFilter.themes.created_at": string;
  /** Format: uuid */
  "rowFilter.themes.owner_template_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.themes.deleted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.themes.modified_at": string;
  /** Format: character varying */
  "rowFilter.themes.title": string;
  /** Format: jsonb */
  "rowFilter.themes.ui_schema": string;
  /** Format: ARRAY */
  "rowFilter.themes.size": string;
  /** Format: uuid */
  "rowFilter.themes.owner_profile_id": string;
  /** Format: character varying */
  "rowFilter.themes.figma_id": string;
  /** Format: character varying */
  "rowFilter.themes.figma_node": string;
  /** Format: jsonb */
  "rowFilter.themes.fonts": string;
}

export interface operations {}

export interface external {}

import { ServerResponse } from 'http'
import { performance } from 'perf_hooks'

// Generated by https://quicktype.io

interface ExistingHeaders {
  headers: Record<string, string>
  nest: {
    name: string
    inside: string
  }[]
}

export default class Performance {
  timers: {
    [key: string]: { start: number; end?: number; id?: string }
  } = {}
  startTimer = (name, id = null) => {
    this.timers[name] = { start: performance.now(), id }
  }
  endTimer = name => {
    this.timers[name] = { ...this.timers[name], end: performance.now() }
  }
  setHeader = (res: ServerResponse, existing?: ExistingHeaders) => {
    let existingHeaders = null
    let existingKeys = []
    if (existing?.headers['server-timing']) {
      existingHeaders = existing.headers['server-timing'].split(', ').reduce((obj, currentStr) => {
        const keyMatch = currentStr.match(/\;desc="(.*?)\"/)
        const valMatch = currentStr.match(/\;dur=(.*?)\;/)
        if (keyMatch.length > 1 && valMatch.length > 1) {
          const key = keyMatch[1]
          existingKeys.push(key)
          const val = parseFloat(valMatch[1])
          return { ...obj, [key]: val }
        } else {
          return obj
        }
      }, {})
      existing?.nest.map(item => {
        const matchingKey = Object.keys(this.timers).find(key => key === item.inside)
        if (matchingKey)
          this.timers[matchingKey].end = this.timers[matchingKey].end - existingHeaders[item.name]
      })
    }

    let headerValue = ''
    if (existing?.headers['server-timing']) headerValue += existing.headers['server-timing']
    headerValue += Object.entries(this.timers).reduce((str, [k, v], i) => {
      if (i > 0 || existing?.headers['server-timing']) str += ', '
      str += `${v.id || i};dur=${v.end - v.start};desc="${k}"`
      return str
    }, '')

    this.timers = {}
    res.setHeader('Server-Timing', headerValue)
  }
}
